import { useState, useEffect } from "react"
import { User, Twitter, BarChart2, X, Menu, Home, DollarSign, HelpCircle } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

type TokenHolder = {
  id: number
  name: string
  holdingPercentage: number
  twitterHandle: string
  walletAddress: string
  followCount: number
}

const generateRandomPercentage = (): number => {
  const rand = Math.random()
  if (rand < 0.02) return 0 // 2% chance of being 0%
  if (rand < 0.12) return Math.floor(Math.random() * 30) + 1 // 10% chance of being 1-30%
  if (rand < 0.32) return Math.floor(Math.random() * 69) + 31 // 20% chance of being 31-99%
  return 100 // 68% chance of being 100%
}

const generateRandomAddress = (): string => {
  return '0x' + Array(40).fill(0).map(() => Math.random().toString(16)[2]).join('')
}

const generateRandomFollowCount = (): number => {
  return Math.floor(Math.random() * 1000000) + 1000
}

const getColorClass = (percentage: number): string => {
  if (percentage === 0) return 'bg-gray-500'
  if (percentage <= 30) return 'bg-red-500'
  if (percentage <= 99) return 'bg-orange-500'
  return 'bg-green-500'
}

export default function TokenHolderDashboard() {
  const [tokenHolders, setTokenHolders] = useState<TokenHolder[]>([])
  const [selectedHolder, setSelectedHolder] = useState<TokenHolder | null>(null)
  const [sortBy, setSortBy] = useState<string>("holdingPercentage")
  const [showExplainer, setShowExplainer] = useState<boolean>(false)
  const [mobileMenuOpen, setMobileMenuOpen] = useState<boolean>(false)

  useEffect(() => {
    const holders = Array.from({ length: 98 }, (_, i) => ({
      id: i + 1,
      name: `Influencer ${i + 1}`,
      holdingPercentage: generateRandomPercentage(),
      twitterHandle: `influencer${i + 1}`,
      walletAddress: generateRandomAddress(),
      followCount: generateRandomFollowCount()
    }))
    holders.push(
      {
        id: 99,
        name: 'Broke Fag 1',
        holdingPercentage: 0,
        twitterHandle: 'brokefag1',
        walletAddress: generateRandomAddress(),
        followCount: generateRandomFollowCount()
      },
      {
        id: 100,
        name: 'Broke Fag 2',
        holdingPercentage: 0,
        twitterHandle: 'brokefag2',
        walletAddress: generateRandomAddress(),
        followCount: generateRandomFollowCount()
      }
    )
    setTokenHolders(holders)
  }, [])

  const sortedHolders = [...tokenHolders].sort((a, b) => {
    if (sortBy === "BrokestFag") {
      return a.holdingPercentage - b.holdingPercentage
    } else if (sortBy === "ChadestChad") {
      return b.holdingPercentage - a.holdingPercentage
    } else if (sortBy === "followCount") {
      return b.followCount - a.followCount
    }
    return 0
  })

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100">
      <nav className="bg-gray-800 border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <span className="text-xl font-bold">TrustGame</span>
              </div>
              <div className="hidden md:block">
                <div className="ml-10 flex items-center space-x-4">
                  <a href="#" className="flex items-center text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                    <Home className="w-4 h-4 mr-2" />
                    Dashboard
                  </a>
                  <a href="#" className="flex items-center text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                    <DollarSign className="w-4 h-4 mr-2" />
                    Buy
                  </a>
                  <a href="#" className="flex items-center text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                    <HelpCircle className="w-4 h-4 mr-2" />
                    FAQ
                  </a>
                </div>
              </div>
            </div>
            <div className="hidden md:block">
              <Button variant="outline" size="sm" onClick={() => setShowExplainer(true)} className="bg-purple-600 hover:bg-purple-700 text-white border-none">
                How It Works
              </Button>
            </div>
            <div className="-mr-2 flex md:hidden">
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                type="button"
                className="bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                aria-controls="mobile-menu"
                aria-expanded="false"
              >
                <span className="sr-only">Open main menu</span>
                <Menu className="block h-6 w-6" aria-hidden="true" />
              </button>
            </div>
          </div>
        </div>

        {mobileMenuOpen && (
          <div className="md:hidden" id="mobile-menu">
            <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
              <a href="#" className="flex items-center text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                <Home className="w-4 h-4 mr-2" />
                Dashboard
              </a>
              <a href="#" className="flex items-center text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                <DollarSign className="w-4 h-4 mr-2" />
                Buy
              </a>
              <a href="#" className="flex items-center text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                <HelpCircle className="w-4 h-4 mr-2" />
                FAQ
              </a>
              <Button variant="outline" size="sm" onClick={() => setShowExplainer(true)} className="w-full mt-2 bg-purple-600 hover:bg-purple-700 text-white border-none">
                How It Works
              </Button>
            </div>
          </div>
        )}
      </nav>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <Card className="w-full bg-gray-800 border-none shadow-none">
            <CardContent className="p-4">
              <div className="flex flex-col sm:flex-row justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-gray-100 mb-4 sm:mb-0">Who Can You Trust With Your Wealth?</h1>
                <Select onValueChange={setSortBy} defaultValue="ChadestChad">
                  <SelectTrigger className="w-[180px] bg-gray-700 border-none">
                    <SelectValue placeholder="Sort by" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-700">
                    <SelectItem value="BrokestFag">BrokestFag</SelectItem>
                    <SelectItem value="followCount">By follow count</SelectItem>
                    <SelectItem value="ChadestChad">ChadestChad</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-10 gap-4">
                {sortedHolders.map((holder) => (
                  <div
                    key={holder.id}
                    className={`relative aspect-square bg-gray-700 cursor-pointer transform hover:scale-105 transition-transform duration-200`}
                    onClick={() => setSelectedHolder(holder)}
                  >
                    <div className="absolute inset-0 flex items-center justify-center">
                      <User className="w-3/4 h-3/4 text-gray-500" />
                    </div>
                    <div
                      className={`absolute inset-0 ${getColorClass(holder.holdingPercentage)} opacity-50`}
                      style={{
                        clipPath: `polygon(0 ${100 - holder.holdingPercentage}%, 100% ${100 - holder.holdingPercentage}%, 100% 100%, 0% 100%)`,
                      }}
                    />
                    {holder.holdingPercentage === 100 && (
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-white text-2xl font-bold transform rotate-45 bg-green-600 px-2 py-1">CHAD</span>
                      </div>
                    )}
                    {holder.holdingPercentage === 0 && (
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-white text-xl font-bold transform rotate-45 bg-red-600 px-2 py-1">BROKE FAG</span>
                      </div>
                    )}
                    <span className="absolute bottom-2 right-2 bg-gray-900 text-white text-xs px-2 py-1">
                      {holder.holdingPercentage}%
                    </span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </main>

      <Dialog open={selectedHolder !== null} onOpenChange={(open) => !open && setSelectedHolder(null)}>
        <DialogContent className="bg-gray-800 text-gray-100 border-none">
          <DialogHeader>
            <DialogTitle>{selectedHolder?.name}</DialogTitle>
            <DialogDescription>
              Holding: {selectedHolder?.holdingPercentage}%
              <br />
              Followers: {selectedHolder?.followCount.toLocaleString()}
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-center space-x-4 mt-4">
            <Button
              asChild
              variant="outline"
              className="bg-blue-500 hover:bg-blue-600 text-white border-none"
            >
              <a
                href={`https://twitter.com/${selectedHolder?.twitterHandle}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                <Twitter className="w-4 h-4 mr-2" />
                Twitter Profile
              </a>
            </Button>
            <Button
              asChild
              variant="outline"
              className="bg-purple-500 hover:bg-purple-600 text-white border-none"
            >
              <a
                href={`https://dexscreener.com/ethereum/${selectedHolder?.walletAddress}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                <BarChart2 className="w-4 h-4 mr-2" />
                DEXScreener
              </a>
            </Button>
          </div>
          <Button
            variant="ghost"
            className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
            onClick={() => setSelectedHolder(null)}
          >
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </Button>
        </DialogContent>
      </Dialog>

      <Dialog open={showExplainer} onOpenChange={setShowExplainer}>
        <DialogContent className="bg-gray-800 text-gray-100 border-none">
          <DialogHeader>
            <DialogTitle>How the Game Works</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p>Imagine a wild crypto game where top influencers play chicken with tokens:</p>
            <ul className="list-disc list-inside space-y-2">
              <li>50% of tokens airdropped to 100-200 famous crypto influencers.</li>
              <li>50% of tokens in LP.</li>
              <li>Public dashboard tracks who's moving, holding, or dumping tokens.</li>
              <li>Players aim to be the "biggest chad" by not selling.</li>
              <li>First seller branded as the desperate "brokefag".</li>
              <li>Cross-chain implementation for maximum chaos.</li>
            </ul>
            <p>It's a high-stakes game of reputation and nerves. Who'll hold strong, and who'll crack under pressure? Watch the crypto elite sweat as they balance greed, fear, and clout in real-time! Who starts the rug?</p>
          </div>
          <Button
            variant="ghost"
            className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus: ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
            onClick={() => setShowExplainer(false)}
          >
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </Button>
        </DialogContent>
      </Dialog>
    </div>
  )
}